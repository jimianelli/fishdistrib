import json
import math
from pathlib import Path


DATA_DIR = Path("data")
OUTPUT_FILE = Path("static/js/land-polygons.js")
SOURCE_FILE = DATA_DIR / "countries.geojson"


def perpendicular_distance(point, start, end):
    (x, y) = point
    (x1, y1) = start
    (x2, y2) = end

    if (x1, y1) == (x2, y2):
        return math.hypot(x - x1, y - y1)

    numerator = abs((y2 - y1) * x - (x2 - x1) * y + x2 * y1 - y2 * x1)
    denominator = math.hypot(x2 - x1, y2 - y1)
    return numerator / denominator


def rdp(points, epsilon):
    if len(points) <= 2:
        return points

    start = points[0]
    end = points[-1]
    max_distance = 0
    index = 0

    for i in range(1, len(points) - 1):
        distance = perpendicular_distance(points[i], start, end)
        if distance > max_distance:
            index = i
            max_distance = distance

    if max_distance > epsilon:
        left = rdp(points[: index + 1], epsilon)
        right = rdp(points[index:], epsilon)
        return left[:-1] + right
    else:
        return [start, end]


def polygon_area(points):
    area = 0.0
    for i in range(len(points)):
        x1, y1 = points[i]
        x2, y2 = points[(i + 1) % len(points)]
        area += x1 * y2 - x2 * y1
    return abs(area) / 2.0


def simplify_ring(coords, epsilon=0.25):
    if len(coords) <= 3:
        return coords

    if coords[0] == coords[-1]:
        coords = coords[:-1]

    simplified = rdp(coords, epsilon)

    if simplified[0] != simplified[-1]:
        simplified.append(simplified[0])

    return simplified


def main():
    if not SOURCE_FILE.exists():
        raise FileNotFoundError(f"Missing source file: {SOURCE_FILE}")

    with SOURCE_FILE.open("r", encoding="utf-8") as f:
        data = json.load(f)

    polygons = []
    epsilon = 0.3
    min_area = 0.4

    for feature in data["features"]:
        geometry = feature["geometry"]
        if geometry["type"] == "Polygon":
            rings = [geometry["coordinates"]]
        elif geometry["type"] == "MultiPolygon":
            rings = geometry["coordinates"]
        else:
            continue

        for ring in rings:
            if not ring:
                continue

            outer = [(float(lon), float(lat)) for lon, lat in ring[0]]
            if polygon_area(outer) < min_area:
                continue

            simplified = simplify_ring(outer, epsilon=epsilon)
            if len(simplified) < 4:
                continue

            # Skip rings with extreme latitudes that distort orthographic view
            max_lat = max(lat for _, lat in simplified)
            min_lat = min(lat for _, lat in simplified)
            if max_lat > 85 or min_lat < -85:
                continue

            polygons.append(simplified)

    polygons.sort(key=lambda poly: polygon_area(poly), reverse=True)

    with OUTPUT_FILE.open("w", encoding="utf-8") as out:
        out.write("// Auto-generated by scripts/build_land.py\n")
        out.write("const LAND_POLYGONS = [\n")
        for poly in polygons:
            coord_pairs = ", ".join(f"[{lon:.4f}, {lat:.4f}]" for lon, lat in poly)
            out.write(f"  [{coord_pairs}],\n")
        out.write("];\n")

    print(f"Exported {len(polygons)} polygons to {OUTPUT_FILE}")


if __name__ == "__main__":
    main()
